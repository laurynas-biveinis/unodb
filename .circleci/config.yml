version: 2.1

jobs:
  build-linux:
    parameters:
      build_type:
        type: enum
        enum: ["Debug", "Release"]
      compiler:
        type: enum
        enum: ["clang", "gcc"]
      asan:
        type: boolean
        default: false
      tsan:
        type: boolean
        default: false
      ubsan:
        type: boolean
        default: false
    machine:
      image: ubuntu-2204:2023.02.1
    resource_class: arm.medium
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init
      - run:
          name: Installing dependencies (common)
          command: |
            sudo apt-get update
            sudo apt-get install -y libboost-dev
      - when:
          condition:
            equal: [ "gcc", << parameters.compiler >> ]
          steps:
            - run:
                name: Installing dependencies (GCC)
                command: |
                  sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
                  sudo apt-get update
                  sudo apt-get install -y g++-13
      - when:
          condition:
            equal: [ "clang", << parameters.compiler >> ]
          steps:
            - run:
                name: Installing dependencies (LLVM common)
                command: |
                  curl 'https://apt.llvm.org/llvm-snapshot.gpg.key' \
                    | sudo apt-key add -
                  echo \
                    'deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-19 main' \
                    | sudo tee -a /etc/apt/sources.list
                  sudo apt-get update
                  sudo NEEDRESTART_MODE=a apt-get install -y clang-19 \
                    clang-tidy-19 iwyu
      - when:
          condition:
            and:
              - equal: [ "clang", << parameters.compiler >> ]
              - equal: [ "Release", << parameters.build_type >> ]
          steps:
            - run:
                name: Installing dependencies (LLVM Release)
                command: |
                  sudo NEEDRESTART_MODE=a apt-get install -y libomp5-19 \
                    llvm-19 lld-19
      - run:
          name: Create build environment
          command: mkdir build
      - run:
          name: Configure CMake
          working_directory: build
          command: |
            readonly BUILD_TYPE=<< parameters.build_type >>
            readonly COMPILER=<< parameters.compiler >>
            readonly ASAN=<< parameters.asan >>
            readonly TSAN=<< parameters.tsan >>
            readonly UBSAN=<< parameters.ubsan >>
            if [[ $COMPILER == "gcc" ]]; then
              V=13
              export CC=gcc-$V
              export CXX=g++-$V
              EXTRA_CMAKE_ARGS=()
            elif [[ $COMPILER == "clang" ]]; then
              V=19
              export CC=clang-$V
              export CXX=clang++-$V
              if [[ $BUILD_TYPE == "Release" ]]; then
                EXTRA_CMAKE_ARGS=(\
                  "-DLLVMAR_EXECUTABLE=/usr/bin/llvm-ar-$V" \
                  "-DLLVMNM_EXECUTABLE=/usr/bin/llvm-nm-$V" \
                  "-DLLVMRANLIB_EXECUTABLE=/usr/bin/llvm-ranlib-$V")
              else
                EXTRA_CMAKE_ARGS=()
              fi
              EXTRA_CMAKE_ARGS=("${EXTRA_CMAKE_ARGS[@]}" \
                  "-DCLANG_TIDY_EXE=/usr/bin/clang-tidy-$V")
            fi
            cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSTANDALONE=ON \
              -DMAINTAINER_MODE=ON -DSANITIZE_ADDRESS=$ASAN \
              -DSANITIZE_THREAD=$TSAN -DSANITIZE_UB=$UBSAN \
              "${EXTRA_CMAKE_ARGS[@]}"
      - run:
          name: Build
          working_directory: build
          command: make -j2
      - run:
          name: Correctness test
          working_directory: build
          command: ctest -j3 -V
      - when:
          condition:
            not:
              and:
                - << parameters.asan >>
                - equal: [ "Debug", << parameters.build_type >> ]
          steps:
            - run:
                name: Benchmark correctness test
                working_directory: build
                command: make quick_benchmarks
      - when:
          condition:
            not:
              or:
                - << parameters.asan >>
                - << parameters.tsan >>
                - << parameters.ubsan >>
          steps:
            - run:
                name: Valgrind test
                working_directory: build
                command: |
                  sudo NEEDRESTART_MODE=a apt-get install -y valgrind
                  make valgrind

  build-macos:
    parameters:
      build_type:
        type: enum
        enum: ["Debug", "Release"]
      asan:
        type: boolean
        default: false
      tsan:
        type: boolean
        default: false
      ubsan:
        type: boolean
        default: false
    macos:
      xcode: 15.1.0
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive
      - run:
          name: Install dependencies
          command: |
            sudo -H pip install setuptools
            brew install boost cmake
      - run:
          name: Create build environment
          command: mkdir build
      - run:
          name: Configure CMake
          working_directory: build
          command: |
            readonly BUILD_TYPE=<< parameters.build_type >>
            readonly ASAN=<< parameters.asan >>
            readonly TSAN=<< parameters.tsan >>
            readonly UBSAN=<< parameters.ubsan >>
            export CC=clang
            export CXX=clang++
            cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSTANDALONE=ON \
              -DMAINTAINER_MODE=OFF -DSANITIZE_ADDRESS=$ASAN \
              -DSANITIZE_THREAD=$TSAN -DSANITIZE_UB=$UBSAN
      - run:
          name: Build
          working_directory: build
          command: make -j3
      - run:
          name: Correctness test
          working_directory: build
          command: ctest -j3 -V
      - when:
          condition:
            not:
              and:
                - << parameters.asan >>
                - equal: [ "Debug", << parameters.build_type >> ]
          steps:
            - run:
                name: Benchmark correctness test
                working_directory: build
                command: make quick_benchmarks

workflows:
  build:
    jobs:
      - build-linux:
          name: GCC 13 Debug
          build_type: Debug
          compiler: gcc
      - build-linux:
          name: GCC 13 Debug with ASan
          build_type: Debug
          compiler: gcc
          asan: true
      - build-linux:
          name: GCC 13 Debug with TSan
          build_type: Debug
          compiler: gcc
          tsan: true
      - build-linux:
          name: GCC 13 Debug with UBSan
          build_type: Debug
          compiler: gcc
          ubsan: true
      - build-linux:
          name: GCC 13 Release
          build_type: Release
          compiler: gcc
      - build-linux:
          name: GCC 13 Release with ASan
          build_type: Release
          compiler: gcc
          asan: true
      - build-linux:
          name: GCC 13 Release with TSan
          build_type: Release
          compiler: gcc
          tsan: true
      - build-linux:
          name: GCC 13 Release with UBSan
          build_type: Release
          compiler: gcc
          ubsan: true
      - build-linux:
          name: clang 19 Debug
          build_type: Debug
          compiler: clang
      - build-linux:
          name: clang 19 Debug with ASan
          build_type: Debug
          compiler: clang
          asan: true
      - build-linux:
          name: clang 19 Debug with TSan
          build_type: Debug
          compiler: clang
          tsan: true
      - build-linux:
          name: clang 19 Debug with UBSan
          build_type: Debug
          compiler: clang
          ubsan: true
      - build-linux:
          name: clang 19 Release
          build_type: Release
          compiler: clang
      - build-linux:
          name: clang 19 Release with ASan
          build_type: Release
          compiler: clang
          asan: true
      - build-linux:
          name: clang 19 Release with TSan
          build_type: Release
          compiler: clang
          tsan: true
      - build-linux:
          name: clang 19 Release with UBSan
          build_type: Release
          compiler: clang
          ubsan: true
      - build-macos:
          name: macOS Debug (Apple Silicon)
          build_type: Debug
      - build-macos:
          name: macOS Debug with ASan (Apple Silicon)
          build_type: Debug
          asan: true
      - build-macos:
          name: macOS Debug with TSan (Apple Silicon)
          build_type: Debug
          tsan: true
      - build-macos:
          name: macOS Debug with UBSan (Apple Silicon)
          build_type: Debug
          ubsan: true
      - build-macos:
          name: macOS Release (Apple Silicon)
          build_type: Release
      - build-macos:
          name: macOS Release with ASan (Apple Silicon)
          build_type: Release
          asan: true
      - build-macos:
          name: macOS Release with TSan (Apple Silicon)
          build_type: Release
          tsan: true
      - build-macos:
          name: macOS Release with UBSan (Apple Silicon)
          build_type: Release
          ubsan: true
