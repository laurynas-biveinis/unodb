---
version: 2.1

parameters:
  GCC_VERSION:
    type: string
    default: "14"
  CLANG_VERSION:
    type: string
    default: "20"

jobs:
  build-linux:
    parameters:
      build_type:
        type: enum
        enum: ["Debug", "Release"]
      compiler:
        type: enum
        enum: ["clang", "gcc"]
      asan:
        type: boolean
        default: false
      tsan:
        type: boolean
        default: false
      ubsan:
        type: boolean
        default: false
    environment:
      GCC_VERSION: << pipeline.parameters.GCC_VERSION >>
      CLANG_VERSION: << pipeline.parameters.CLANG_VERSION >>
    machine:
      image: ubuntu-2404:2024.11.1
    resource_class: arm.medium
    steps:
      - checkout
      - run:
          name: Installing dependencies (common)
          command: |
            sudo apt-get update
            sudo apt-get install -y libboost-dev libgtest-dev libgmock-dev \
                libbenchmark-dev valgrind
      - when:
          condition:
            equal: ["gcc", << parameters.compiler >>]
          steps:
            - run:
                name: Installing dependencies (GCC)
                command: |
                  sudo apt-get install -y g++-${GCC_VERSION}
      - when:
          condition:
            equal: ["clang", << parameters.compiler >>]
          steps:
            - run:
                name: Installing dependencies (LLVM common)
                command: |
                  curl 'https://apt.llvm.org/llvm-snapshot.gpg.key' \
                    | sudo apt-key add -
                  sudo add-apt-repository -y \
                    "deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main"
                  sudo apt-get update
                  sudo apt-get install -y clang-${CLANG_VERSION} \
                    clang-tidy-${CLANG_VERSION} iwyu \
                    libstdc++-${GCC_VERSION}-dev
      - when:
          condition:
            and:
              - equal: ["clang", << parameters.compiler >>]
              - equal: ["Release", << parameters.build_type >>]
          steps:
            - run:
                name: Installing dependencies (LLVM Release)
                command: |
                  sudo apt-get install -y libomp5-${CLANG_VERSION} \
                      llvm-${CLANG_VERSION} lld-${CLANG_VERSION}
      - when:
          condition:
            << parameters.tsan >>
          steps:
            - run:
                name: Lowering ASLR entropy
                # Remove once the change for
                # https://github.com/google/sanitizers/issues/1716 has
                # propagated everywhere
                command: sudo sysctl vm.mmap_rnd_bits=28
      - when:
          condition:
            not:
              or:
                - << parameters.asan >>
                - << parameters.tsan >>
                - << parameters.ubsan >>
          steps:
            - run:
                name: Configure CMake (examples)
                command: |
                  readonly BUILD_TYPE=<< parameters.build_type >>
                  readonly COMPILER=<< parameters.compiler >>
                  if [[ $COMPILER == "gcc" ]]; then
                    export CC=gcc-$GCC_VERSION
                    export CXX=g++-$GCC_VERSION
                  elif [[ $COMPILER == "clang" ]]; then
                    export CC=clang-$CLANG_VERSION
                    export CXX=clang++-$CLANG_VERSION
                  fi
                  cmake -S examples -B build-examples \
                      -DCMAKE_BUILD_TYPE=$BUILD_TYPE
            - run:
                name: Examples
                working_directory: build-examples
                command: make -j2 -k examples
            - run:
                name: Valgrind examples
                working_directory: build-examples
                command: make -k valgrind_examples
      - run:
          name: Checkout submodules
          command: git submodule update --init
      - run:
          name: Configure CMake
          command: |
            mkdir build
            cd build
            readonly BUILD_TYPE=<< parameters.build_type >>
            readonly COMPILER=<< parameters.compiler >>
            readonly ASAN=<< parameters.asan >>
            readonly TSAN=<< parameters.tsan >>
            readonly UBSAN=<< parameters.ubsan >>
            if [[ $COMPILER == "gcc" ]]; then
              export CC=gcc-$GCC_VERSION
              export CXX=g++-$GCC_VERSION
              EXTRA_CMAKE_ARGS=()
            elif [[ $COMPILER == "clang" ]]; then
              export CC=clang-$CLANG_VERSION
              export CXX=clang++-$CLANG_VERSION
              if [[ $BUILD_TYPE == "Release" ]]; then
                EXTRA_CMAKE_ARGS=(\
                  "-DLLVMAR_EXECUTABLE=/usr/bin/llvm-ar-$CLANG_VERSION" \
                  "-DLLVMNM_EXECUTABLE=/usr/bin/llvm-nm-$CLANG_VERSION" \
                  "-DLLVMRANLIB_EXECUTABLE=/usr/bin/llvm-ranlib-$CLANG_VERSION")
              else
                EXTRA_CMAKE_ARGS=()
              fi
              EXTRA_CMAKE_ARGS=("${EXTRA_CMAKE_ARGS[@]}" \
                  "-DCLANG_TIDY_EXE=/usr/bin/clang-tidy-$CLANG_VERSION")
            fi
            cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSTANDALONE=ON \
              -DMAINTAINER_MODE=ON -DSANITIZE_ADDRESS=$ASAN \
              -DSANITIZE_THREAD=$TSAN -DSANITIZE_UB=$UBSAN \
              -DCMAKE_CXX_FLAGS=-march=armv8.2-a "${EXTRA_CMAKE_ARGS[@]}"
      - run:
          name: Build
          working_directory: build
          command: make -j2 -k
      - run:
          name: Correctness test
          working_directory: build
          command: ctest -j3 -V
      - when:
          condition:
            not:
              and:
                - << parameters.asan >>
                - equal: ["Debug", << parameters.build_type >>]
          steps:
            - run:
                name: Benchmark correctness test
                working_directory: build
                command: make -k quick_benchmarks
      - when:
          condition:
            not:
              or:
                - << parameters.asan >>
                - << parameters.tsan >>
                - << parameters.ubsan >>
          steps:
            - run:
                name: Valgrind test
                working_directory: build
                command: make -k valgrind

  build-macos:
    parameters:
      build_type:
        type: enum
        enum: ["Debug", "Release"]
      asan:
        type: boolean
        default: false
      tsan:
        type: boolean
        default: false
      ubsan:
        type: boolean
        default: false
    macos:
      xcode: 16.2.0
    resource_class: macos.m1.medium.gen1
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            brew install boost cmake
      - when:
          condition:
            not:
              or:
                - << parameters.asan >>
                - << parameters.tsan >>
                - << parameters.ubsan >>
          steps:
            - run:
                name: Installing dependencies (examples)
                command: brew install googletest google-benchmark
            - run:
                name: Configure CMake (examples)
                command: |
                  readonly BUILD_TYPE=<< parameters.build_type >>
                  export CC=clang
                  export CXX=clang++
                  cmake -S examples -B build-examples \
                      -DCMAKE_BUILD_TYPE=$BUILD_TYPE
            - run:
                name: Examples
                working_directory: build-examples
                command: make -j3 -k examples
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive
      - run:
          name: Configure CMake
          command: |
            readonly BUILD_TYPE=<< parameters.build_type >>
            readonly ASAN=<< parameters.asan >>
            readonly TSAN=<< parameters.tsan >>
            readonly UBSAN=<< parameters.ubsan >>
            export CC=clang
            export CXX=clang++
            cmake -S . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSTANDALONE=ON \
              -DMAINTAINER_MODE=OFF -DSANITIZE_ADDRESS=$ASAN \
              -DSANITIZE_THREAD=$TSAN -DSANITIZE_UB=$UBSAN
      - run:
          name: Build
          working_directory: build
          command: make -j3 -k
      - run:
          name: Correctness test
          working_directory: build
          command: ctest -j3 -V
      - when:
          condition:
            not:
              and:
                - << parameters.asan >>
                - equal: ["Debug", << parameters.build_type >>]
          steps:
            - run:
                name: Benchmark correctness test
                working_directory: build
                command: make -k quick_benchmarks

workflows:
  build:
    jobs:
      - build-linux:
          name: GCC << pipeline.parameters.GCC_VERSION >> Debug
          build_type: Debug
          compiler: gcc
      - build-linux:
          name: GCC << pipeline.parameters.GCC_VERSION >> Debug with ASan
          build_type: Debug
          compiler: gcc
          asan: true
      - build-linux:
          name: GCC << pipeline.parameters.GCC_VERSION >> Debug with TSan
          build_type: Debug
          compiler: gcc
          tsan: true
      - build-linux:
          name: GCC << pipeline.parameters.GCC_VERSION >> Debug with UBSan
          build_type: Debug
          compiler: gcc
          ubsan: true
      - build-linux:
          name: GCC << pipeline.parameters.GCC_VERSION >> Release
          build_type: Release
          compiler: gcc
      - build-linux:
          name: GCC << pipeline.parameters.GCC_VERSION >> Release with ASan
          build_type: Release
          compiler: gcc
          asan: true
      - build-linux:
          name: GCC << pipeline.parameters.GCC_VERSION >> Release with TSan
          build_type: Release
          compiler: gcc
          tsan: true
      - build-linux:
          name: GCC << pipeline.parameters.GCC_VERSION >> Release with UBSan
          build_type: Release
          compiler: gcc
          ubsan: true
      - build-linux:
          name: clang << pipeline.parameters.CLANG_VERSION >> Debug
          build_type: Debug
          compiler: clang
      - build-linux:
          name: clang << pipeline.parameters.CLANG_VERSION >> Debug with ASan
          build_type: Debug
          compiler: clang
          asan: true
      - build-linux:
          name: clang << pipeline.parameters.CLANG_VERSION >> Debug with TSan
          build_type: Debug
          compiler: clang
          tsan: true
      - build-linux:
          name: clang << pipeline.parameters.CLANG_VERSION >> Debug with UBSan
          build_type: Debug
          compiler: clang
          ubsan: true
      - build-linux:
          name: clang << pipeline.parameters.CLANG_VERSION >> Release
          build_type: Release
          compiler: clang
      # Disabled until https://github.com/laurynas-biveinis/unodb/issues/700 is
      # fixed.
      # - build-linux:
      #     name: clang << pipeline.parameters.CLANG_VERSION >> Release with ASan
      #     build_type: Release
      #     compiler: clang
      #     asan: true
      - build-linux:
          name: clang << pipeline.parameters.CLANG_VERSION >> Release with TSan
          build_type: Release
          compiler: clang
          tsan: true
      - build-linux:
          name: clang << pipeline.parameters.CLANG_VERSION >> Release with UBSan
          build_type: Release
          compiler: clang
          ubsan: true
      - build-macos:
          name: macOS Debug (Apple Silicon)
          build_type: Debug
      - build-macos:
          name: macOS Debug with ASan (Apple Silicon)
          build_type: Debug
          asan: true
      - build-macos:
          name: macOS Debug with TSan (Apple Silicon)
          build_type: Debug
          tsan: true
      - build-macos:
          name: macOS Debug with UBSan (Apple Silicon)
          build_type: Debug
          ubsan: true
      - build-macos:
          name: macOS Release (Apple Silicon)
          build_type: Release
      - build-macos:
          name: macOS Release with ASan (Apple Silicon)
          build_type: Release
          asan: true
      - build-macos:
          name: macOS Release with TSan (Apple Silicon)
          build_type: Release
          tsan: true
      - build-macos:
          name: macOS Release with UBSan (Apple Silicon)
          build_type: Release
          ubsan: true
