name: build

on: [push]

env:
  DEFAULT_COMPILER: gcc
  DEFAULT_SANITIZE_ADDRESS: OFF
  DEFAULT_SANITIZE_THREAD: OFF
  DEFAULT_SANITIZE_UB: OFF
  DEFAULT_STATIC_ANALYSIS: OFF
  DEFAULT_CPPLINT: OFF
  DEFAULT_CPPCHECK: OFF
  DEFAULT_COVERAGE: OFF

jobs:
  build:
    runs-on: ${{matrix.os}}

    env:
      BUILD_TYPE: ${{matrix.BUILD_TYPE}}
      SANITIZE_ADDRESS: ${{matrix.SANITIZE_ADDRESS}}
      SANITIZE_THREAD: ${{matrix.SANITIZE_THREAD}}
      SANITIZE_UB: ${{matrix.SANITIZE_UB}}
      STATIC_ANALYSIS: ${{matrix.STATIC_ANALYSIS}}
      COVERAGE: ${{matrix.COVERAGE}}
      COMPILER: ${{matrix.COMPILER}}
      CPPLINT: ${{matrix.CPPLINT}}
      CPPCHECK: ${{matrix.CPPCHECK}}

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: GCC 11 Release
            os: ubuntu-20.04
            BUILD_TYPE: Release

          - name: GCC 11 Release with ASan
            os: ubuntu-20.04
            BUILD_TYPE: Release
            SANITIZE_ADDRESS: ON

          - name: GCC 11 Release with TSan
            os: ubuntu-20.04
            BUILD_TYPE: Release
            SANITIZE_THREAD: ON

          - name: GCC 11 Release with UBSan
            os: ubuntu-20.04
            BUILD_TYPE: Release
            SANITIZE_UB: ON

          - name: GCC 11 Debug
            os: ubuntu-20.04
            BUILD_TYPE: Debug

          - name: GCC 11 Debug with ASan
            os: ubuntu-20.04
            BUILD_TYPE: Debug
            SANITIZE_ADDRESS: ON

          - name: GCC 11 Debug with TSan
            os: ubuntu-20.04
            BUILD_TYPE: Debug
            SANITIZE_THREAD: ON

          - name: GCC 11 Debug with UBSan
            os: ubuntu-20.04
            BUILD_TYPE: Debug
            SANITIZE_UB: ON

          - name: GCC 11 Release static analysis & cpplint
            os: ubuntu-20.04
            BUILD_TYPE: Release
            STATIC_ANALYSIS: ON
            CPPLINT: ON

          - name: GCC 11 Debug static analysis
            os: ubuntu-20.04
            BUILD_TYPE: Debug
            STATIC_ANALYSIS: ON

          - name: clang 13 Release
            os: ubuntu-20.04
            BUILD_TYPE: Release
            COMPILER: clang

          - name: clang 13 Release with ASan
            os: ubuntu-20.04
            BUILD_TYPE: Release
            SANITIZE_ADDRESS: ON
            COMPILER: clang

          - name: clang 13 Release with TSan
            os: ubuntu-20.04
            BUILD_TYPE: Release
            SANITIZE_THREAD: ON
            COMPILER: clang

          - name: clang 13 Release with UBSan
            os: ubuntu-20.04
            BUILD_TYPE: Release
            SANITIZE_UB: ON
            COMPILER: clang

          - name: clang 13 Debug
            os: ubuntu-20.04
            BUILD_TYPE: Debug
            COMPILER: clang

          - name: clang 13 Debug with ASan
            os: ubuntu-20.04
            BUILD_TYPE: Debug
            SANITIZE_ADDRESS: ON
            COMPILER: clang

          - name: clang 13 Debug with TSan
            os: ubuntu-20.04
            BUILD_TYPE: Debug
            SANITIZE_THREAD: ON
            COMPILER: clang

          - name: clang 13 Debug with UBSan
            os: ubuntu-20.04
            BUILD_TYPE: Debug
            SANITIZE_UB: ON
            COMPILER: clang

          - name: clang 13 Release static analysis
            os: ubuntu-20.04
            BUILD_TYPE: Release
            COMPILER: clang
            STATIC_ANALYSIS: ON

          - name: clang 13 Debug static analysis
            os: ubuntu-20.04
            BUILD_TYPE: Debug
            COMPILER: clang
            STATIC_ANALYSIS: ON

          - name: XCode Release
            os: macos-latest
            BUILD_TYPE: Release
            COMPILER: macos-clang

          - name: XCode Release with ASan
            os: macos-latest
            BUILD_TYPE: Release
            COMPILER: macos-clang
            SANITIZE_ADDRESS: ON

          - name: XCode Release with TSan
            os: macos-latest
            BUILD_TYPE: Release
            COMPILER: macos-clang
            SANITIZE_THREAD: ON

          - name: XCode Release with UBSan
            os: macos-latest
            BUILD_TYPE: Release
            COMPILER: macos-clang
            SANITIZE_UB: ON

          - name: XCode Debug with cppcheck
            os: macos-latest
            BUILD_TYPE: Debug
            COMPILER: macos-clang
            CPPCHECK: ON

          - name: XCode Debug with ASan
            os: macos-latest
            BUILD_TYPE: Debug
            COMPILER: macos-clang
            SANITIZE_ADDRESS: ON

          - name: XCode Debug with TSan
            os: macos-latest
            BUILD_TYPE: Debug
            COMPILER: macos-clang
            SANITIZE_THREAD: ON

          - name: XCode Debug with UBSan
            os: macos-latest
            BUILD_TYPE: Debug
            COMPILER: macos-clang
            SANITIZE_UB: ON

          - name: Debug coverage
            os: macos-latest
            BUILD_TYPE: Debug
            COMPILER: gcc
            COVERAGE: ON

          - name: Release coverage
            os: macos-latest
            BUILD_TYPE: Release
            COMPILER: gcc
            COVERAGE: ON

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Setup dependencies for Linux
        run: |
          COMPILER="${COMPILER:-$DEFAULT_COMPILER}"
          CPPLINT="${CPPLINT:-$DEFAULT_CPPLINT}"
          SANITIZE_ADDRESS="${SANITIZE_ADDRESS:-$DEFAULT_SANITIZE_ADDRESS}"
          SANITIZE_THREAD="${SANITIZE_THREAD:-$DEFAULT_SANITIZE_THREAD}"
          SANITIZE_UB="${SANITIZE_UB:-$DEFAULT_SANITIZE_UB}"
          STATIC_ANALYSIS="${STATIC_ANALYSIS:-$DEFAULT_STATIC_ANALYSIS}"
          if [[ $COMPILER == "clang" ]]; then
            curl 'https://apt.llvm.org/llvm-snapshot.gpg.key' \
            | sudo apt-key add -
            echo 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-13 main' \
            | sudo tee -a /etc/apt/sources.list
          fi
          sudo apt-get update
          sudo apt-get install -y libc6-dev-i386
          if [[ $SANITIZE_ADDRESS != "ON" && $SANITIZE_THREAD != "ON" \
              && $SANITIZE_UB != "ON" && $STATIC_ANALYSIS != "ON" ]]; then
            sudo apt-get install -y valgrind
          fi
          if [[ $COMPILER == "gcc" ]]; then
            sudo add-apt-repository -y 'ppa:ubuntu-toolchain-r/test'
            sudo apt-get update
            sudo apt-get install -y g++-11
          elif [[ $COMPILER == "clang" ]]; then
            sudo apt-get install -y clang-13
            if [[ $BUILD_TYPE == "Release" ]]; then
              sudo apt-get install -y libomp5-13 llvm-13 lld-13
            fi
            if [[ $STATIC_ANALYSIS == "ON" ]]; then
              sudo apt-get install -y clang-tools-13
            else
              sudo apt-get install -y clang-tidy-13
            fi
          fi
          if [[ $CPPLINT == "ON" ]]; then
            pip install cpplint
          fi
        if: runner.os == 'Linux'

      - name: Set up dependencies for macOS
        run: |
          CPPCHECK="${CPPCHECK:-$DEFAULT_CPPCHECK}"
          COVERAGE="${COVERAGE:-$DEFAULT_COVERAGE}"
          COMPILER="${COMPILER:-$DEFAULT_COMPILER}"
          if [[ $COVERAGE == "ON" ]]; then
            brew update
            brew upgrade gcc
            brew install cpanm lcov
            sudo cpanm install JSON
          fi
          if [[ $CPPCHECK == "ON" ]]; then
            brew install cppcheck
          fi
        if: runner.os == 'macOS'

      - name: Create build environment
        run: mkdir ${{github.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment
        # variable access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        run: |
          COMPILER="${COMPILER:-$DEFAULT_COMPILER}"
          SANITIZE_ADDRESS="${SANITIZE_ADDRESS:-$DEFAULT_SANITIZE_ADDRESS}"
          SANITIZE_THREAD="${SANITIZE_THREAD:-$DEFAULT_SANITIZE_THREAD}"
          SANITIZE_UB="${SANITIZE_UB:-$DEFAULT_SANITIZE_UB}"
          STATIC_ANALYSIS="${STATIC_ANALYSIS:-$DEFAULT_STATIC_ANALYSIS}"
          COVERAGE="${COVERAGE:-$DEFAULT_COVERAGE}"
          export PATH=$HOME/.local/bin:$PATH
          if [[ $COMPILER == "gcc" ]]; then
            export CC=gcc-11
            export CXX=g++-11
            if [[ $COVERAGE == "ON" ]]; then
              EXTRA_CMAKE_ARGS="-DGCOV_PATH=/usr/local/bin/gcov-11"
            fi
          elif [[ $COMPILER == "clang" ]]; then
            export CC=clang-13
            export CXX=clang++-13
            EXTRA_CMAKE_ARGS=
            if [[ $BUILD_TYPE == "Release" ]]; then
              EXTRA_CMAKE_ARGS+="-DLLVMAR_EXECUTABLE=/usr/bin/llvm-ar-13 \
                -DLLVMNM_EXECUTABLE=/usr/bin/llvm-nm-13 \
                -DLLVMRANLIB_EXECUTABLE=/usr/bin/llvm-ranlib-13"
            fi
            # LLVM static analysis wart
            if [[ $STATIC_ANALYSIS == "ON" ]]; then
              STATIC_ANALYSIS=OFF
            else
              EXTRA_CMAKE_ARGS+=" -DCLANG_TIDY_EXE=/usr/bin/clang-tidy-13"
            fi
          elif [[ $COMPILER == "macos-clang" ]]; then
            export CC=clang
            export CXX=clang++
          fi
          cmake $GITHUB_WORKSPACE -DFATAL_WARNINGS=ON \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSANITIZE_ADDRESS=${SANITIZE_ADDRESS} \
          -DSANITIZE_THREAD=${SANITIZE_THREAD} -DSANITIZE_UB=${SANITIZE_UB} \
          -DSTATIC_ANALYSIS=${STATIC_ANALYSIS} -DCOVERAGE=${COVERAGE} \
          ${EXTRA_CMAKE_ARGS}

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: |
          COMPILER="${COMPILER:-$DEFAULT_COMPILER}"
          STATIC_ANALYSIS="${STATIC_ANALYSIS:-$DEFAULT_STATIC_ANALYSIS}"
          if [[ $STATIC_ANALYSIS == "ON" && $COMPILER == "clang" ]]; then
            /usr/bin/scan-build-13 --status-bugs -stats -analyze-headers \
              --force-analyze-debug-code make -j3;
          else
            make -j3
          fi

      - name: Correctness test
        working-directory: ${{github.workspace}}/build
        run: ctest -j3 -V
        if: env.STATIC_ANALYSIS != 'ON' && env.COVERAGE != 'ON'

      - name: Benchmark correctness test
        working-directory: ${{github.workspace}}/build
        run: make quick_benchmarks
        if: env.STATIC_ANALYSIS != 'ON' && env.COVERAGE != 'ON'

      - name: DeepState 1 minute fuzzing
        working-directory: ${{github.workspace}}/build
        run: make -j2 deepstate_1m
        if: env.STATIC_ANALYSIS != 'ON' && env.COVERAGE != 'ON'

      - name: DeepState libfuzzer 1 minute fuzzing
        working-directory: ${{github.workspace}}/build
        run: make -j2 deepstate_lf_1m
        if: >
          env.STATIC_ANALYSIS != 'ON' && env.COVERAGE != 'ON'
          && env.COMPILER == 'clang' && env.BUILD_TYPE != 'Release'
          && env.SANITIZE_THREAD != 'ON'

      - name: Valgrind test
        working-directory: ${{github.workspace}}/build
        run: make valgrind
        if: >
          env.SANITIZE_ADDRESS != 'ON' && env.SANITIZE_THREAD != 'ON'
          && env.SANITIZE_UB != 'ON' && env.STATIC_ANALYSIS != 'ON'
          && runner.os == 'Linux' && env.COVERAGE != 'ON'

      - name: Gather coverage data
        working-directory: ${{github.workspace}}/build
        run: |
          make -j3 coverage
        if: env.COVERAGE == 'ON'

      - name: Upload coverage data
        uses: codecov/codecov-action@v2
        with:
          flags: ${{matrix.BUILD_TYPE}}
          fail_ci_if_error: true
          directory: ${{github.workspace}}/build
          functionalities: gcov
        if: env.COVERAGE == 'ON'
