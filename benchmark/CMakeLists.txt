# Copyright 2020 Laurynas Biveinis

set(micro_benchmark_key_prefix_quick_arg "") # Benchmark is quick as-is
set(micro_benchmark_node4_quick_arg "--benchmark_filter='/16|/20|/100'")
set(micro_benchmark_node16_quick_arg "--benchmark_filter='/64'")
set(micro_benchmark_node48_quick_arg "--benchmark_filter='/64|/128|/192'")
set(micro_benchmark_node256_quick_arg "--benchmark_filter='/8|/128|/192'")
set(micro_benchmark_quick_arg "--benchmark_filter='.*262144|.*51200'")
set(micro_benchmark_mutex_quick_arg "--benchmark_filter='/4/70000/'")

add_custom_target(benchmarks
  env ${ASAN_ENV} ${UBSAN_ENV} ./micro_benchmark_key_prefix
  COMMAND env ${ASAN_ENV} ${UBSAN_ENV} ./micro_benchmark_node4
  COMMAND env ${ASAN_ENV} ${UBSAN_ENV} ./micro_benchmark_node16
  COMMAND env ${ASAN_ENV} ${UBSAN_ENV} ./micro_benchmark_node48
  COMMAND env ${ASAN_ENV} ${UBSAN_ENV} ./micro_benchmark_node256
  COMMAND env ${ASAN_ENV} ${UBSAN_ENV} ./micro_benchmark
  COMMAND env ${ASAN_ENV} ${UBSAN_ENV} ./micro_benchmark_mutex)

add_custom_target(quick_benchmarks
  env ${ASAN_ENV} ${UBSAN_ENV}
  ./micro_benchmark_key_prefix ${micro_benchmark_key_prefix_quick_arg}
  COMMAND env ${ASAN_ENV} ${UBSAN_ENV}
  ./micro_benchmark_node4 ${micro_benchmark_node4_quick_arg}
  COMMAND env ${ASAN_ENV} ${UBSAN_ENV}
  ./micro_benchmark_node16 ${micro_benchmark_node16_quick_arg}
  COMMAND env ${ASAN_ENV} ${UBSAN_ENV}
  ./micro_benchmark_node48 ${micro_benchmark_node48_quick_arg}
  COMMAND env ${ASAN_ENV} ${UBSAN_ENV}
  ./micro_benchmark_node256 ${micro_benchmark_node256_quick_arg}
  COMMAND env ${ASAN_ENV} ${UBSAN_ENV}
  ./micro_benchmark ${micro_benchmark_quick_arg}
  COMMAND env ${ASAN_ENV} ${UBSAN_ENV}
  ./micro_benchmark_mutex ${micro_benchmark_mutex_quick_arg})

add_custom_target(valgrind_benchmarks
  COMMAND valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all
  ./micro_benchmark_key_prefix ${micro_benchmark_key_prefix_quick_arg}
  COMMAND valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all
  ./micro_benchmark_node4 ${micro_benchmark_node4_quick_arg}
  COMMAND valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all
  ./micro_benchmark_node16 ${micro_benchmark_node16_quick_arg}
  COMMAND valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all
  ./micro_benchmark_node48 ${micro_benchmark_node48_quick_arg}
  COMMAND valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all
  ./micro_benchmark_node256 ${micro_benchmark_node256_quick_arg}
  COMMAND valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all
  ./micro_benchmark ${micro_benchmark_quick_arg}
  COMMAND valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all
  ./micro_benchmark_mutex ${micro_benchmark_mutex_quick_arg})

add_library(micro_benchmark_utils STATIC micro_benchmark_utils.cpp
  micro_benchmark_utils.hpp)
common_target_properties(micro_benchmark_utils)
target_include_directories(micro_benchmark_utils PUBLIC ".")
target_link_libraries(micro_benchmark_utils PUBLIC unodb)
target_link_libraries(micro_benchmark_utils PUBLIC benchmark::benchmark)
target_include_directories(micro_benchmark_utils SYSTEM PUBLIC
  ${benchmark_include_dirs})
set_clang_tidy_options(micro_benchmark_utils "${DO_CLANG_TIDY}")

function(ADD_BENCHMARK_TARGET TARGET)
  add_executable("${TARGET}" "${TARGET}.cpp")
  common_target_properties("${TARGET}")
  target_link_libraries("${TARGET}" PRIVATE micro_benchmark_utils)
  add_dependencies(benchmarks "${TARGET}")
  add_dependencies(quick_benchmarks "${TARGET}")
  add_dependencies(valgrind_benchmarks "${TARGET}")
endfunction()

add_benchmark_target(micro_benchmark_key_prefix)
add_benchmark_target(micro_benchmark_node4)
add_benchmark_target(micro_benchmark_node16)
add_benchmark_target(micro_benchmark_node48)
add_benchmark_target(micro_benchmark_node256)
add_benchmark_target(micro_benchmark)
add_benchmark_target(micro_benchmark_mutex)
